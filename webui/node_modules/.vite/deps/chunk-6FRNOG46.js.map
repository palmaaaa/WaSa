{
  "version": 3,
  "sources": ["../../vite/dist/node/index.js"],
  "sourcesContent": ["export { b as build, k as createFilter, u as createLogger, c as createServer, d as defineConfig, f as formatPostcssSourceMap, h as getDepOptimizationConfig, i as isDepsOptimizerEnabled, l as loadConfigFromFile, w as loadEnv, j as mergeAlias, m as mergeConfig, n as normalizePath, o as optimizeDeps, p as preview, g as resolveBaseUrl, e as resolveConfig, x as resolveEnvPrefix, a as resolvePackageData, r as resolvePackageEntry, v as searchForWorkspaceRoot, q as send, s as sortUserPlugins, t as transformWithEsbuild } from './chunks/dep-0fc8e132.js';\nexport { VERSION as version } from './constants.js';\nexport { version as esbuildVersion } from 'esbuild';\nexport { VERSION as rollupVersion } from 'rollup';\nimport 'node:fs';\nimport 'node:path';\nimport 'node:url';\nimport 'node:perf_hooks';\nimport 'node:module';\nimport 'tty';\nimport 'path';\nimport 'fs';\nimport 'events';\nimport 'assert';\nimport 'util';\nimport 'net';\nimport 'url';\nimport 'http';\nimport 'stream';\nimport 'os';\nimport 'child_process';\nimport 'node:os';\nimport 'node:crypto';\nimport 'node:util';\nimport 'node:dns';\nimport 'resolve';\nimport 'crypto';\nimport 'buffer';\nimport 'module';\nimport 'zlib';\nimport 'https';\nimport 'tls';\nimport 'node:http';\nimport 'node:https';\nimport 'worker_threads';\nimport 'querystring';\nimport 'node:readline';\nimport 'node:child_process';\nimport 'node:zlib';\n\n// This file will be built for both ESM and CJS. Avoid relying on other modules as possible.\nconst cssLangs = `\\\\.(css|less|sass|scss|styl|stylus|pcss|postcss)($|\\\\?)`;\nconst cssLangRE = new RegExp(cssLangs);\nconst isCSSRequest = (request) => cssLangRE.test(request);\n// Use splitVendorChunkPlugin() to get the same manualChunks strategy as Vite 2.7\n// We don't recommend using this strategy as a general solution moving forward\n// splitVendorChunk is a simple index/vendor strategy that was used in Vite\n// until v2.8. It is exposed to let people continue to use it in case it was\n// working well for their setups.\n// The cache needs to be reset on buildStart for watch mode to work correctly\n// Don't use this manualChunks strategy for ssr, lib mode, and 'umd' or 'iife'\nclass SplitVendorChunkCache {\n    constructor() {\n        this.cache = new Map();\n    }\n    reset() {\n        this.cache = new Map();\n    }\n}\nfunction splitVendorChunk(options = {}) {\n    const cache = options.cache ?? new SplitVendorChunkCache();\n    return (id, { getModuleInfo }) => {\n        if (id.includes('node_modules') &&\n            !isCSSRequest(id) &&\n            staticImportedByEntry(id, getModuleInfo, cache.cache)) {\n            return 'vendor';\n        }\n    };\n}\nfunction staticImportedByEntry(id, getModuleInfo, cache, importStack = []) {\n    if (cache.has(id)) {\n        return cache.get(id);\n    }\n    if (importStack.includes(id)) {\n        // circular deps!\n        cache.set(id, false);\n        return false;\n    }\n    const mod = getModuleInfo(id);\n    if (!mod) {\n        cache.set(id, false);\n        return false;\n    }\n    if (mod.isEntry) {\n        cache.set(id, true);\n        return true;\n    }\n    const someImporterIs = mod.importers.some((importer) => staticImportedByEntry(importer, getModuleInfo, cache, importStack.concat(id)));\n    cache.set(id, someImporterIs);\n    return someImporterIs;\n}\nfunction splitVendorChunkPlugin() {\n    const caches = [];\n    function createSplitVendorChunk(output, config) {\n        const cache = new SplitVendorChunkCache();\n        caches.push(cache);\n        const build = config.build ?? {};\n        const format = output?.format;\n        if (!build.ssr && !build.lib && format !== 'umd' && format !== 'iife') {\n            return splitVendorChunk({ cache });\n        }\n    }\n    return {\n        name: 'vite:split-vendor-chunk',\n        config(config) {\n            let outputs = config?.build?.rollupOptions?.output;\n            if (outputs) {\n                outputs = Array.isArray(outputs) ? outputs : [outputs];\n                for (const output of outputs) {\n                    const viteManualChunks = createSplitVendorChunk(output, config);\n                    if (viteManualChunks) {\n                        if (output.manualChunks) {\n                            if (typeof output.manualChunks === 'function') {\n                                const userManualChunks = output.manualChunks;\n                                output.manualChunks = (id, api) => {\n                                    return userManualChunks(id, api) ?? viteManualChunks(id, api);\n                                };\n                            }\n                            // else, leave the object form of manualChunks untouched, as\n                            // we can't safely replicate rollup handling.\n                        }\n                        else {\n                            output.manualChunks = viteManualChunks;\n                        }\n                    }\n                }\n            }\n            else {\n                return {\n                    build: {\n                        rollupOptions: {\n                            output: {\n                                manualChunks: createSplitVendorChunk({}, config)\n                            }\n                        }\n                    }\n                };\n            }\n        },\n        buildStart() {\n            caches.forEach((cache) => cache.reset());\n        }\n    };\n}\n\nexport { splitVendorChunk, splitVendorChunkPlugin };\n"],
  "mappings": "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",
  "names": ["build", "_a"]
}
