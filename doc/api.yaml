openapi: 3.0.3
info:
  title: WASAPhoto API
  description: |
    This is the API for the WASAPhoto Homework 1 for the WaSa course by 1849661.
  version: 0.0.1
#=====================================================================================
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user.
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    # change here if you decide to use an integer
                    # or any other type of identifier
                    type: string
                    example: "abcdef012345"
#=====================================================================================
  /users/:
    get:
      tags: ["search"]
      summary: Gets the profile of the user with a certain id.
      description: A user can find another user's profile only if he's not banned by the latter.
      operationId: getUserProfile

      parameters: 
        - $ref: "#/components/parameters/queryId"

      responses:
        '200':
          description: Nickname found successfully
          content:
            text/plain:
              example: "NickNone"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}:
    put:
      tags: ["nickname"]
      summary: Modifies the user's nickname.
      description: Allows the user to modify his own nickname.
      operationId: setMyUserName

      parameters: 
        - $ref: "#/components/parameters/identifier"
        
      requestBody:
        content:
          text/plain:
            example: "NickNone"

      responses:
        '200':
          description: Nickname modified successfully
          content:
            text/plain:
              example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/bannedUsers/{bannedUserId}:
    parameters:
        - $ref: "#/components/parameters/bannedUserId"
        - $ref: '#/components/parameters/identifier'
  
    put:
      tags: ["ban"]
      summary: Bans a user.
      description: Once a user is blocked he/she won't be able to see anything from whoever banned him/her. That includes comments,likes, photos and the profile of the banning user. Banning multiple times is equivalent to banning a user once.
      operationId: banUser
      #parameters:
      #  - $ref: "#/components/parameters/bannedUserId"
      #  - $ref: '#/components/parameters/identifier'
      
      requestBody:
        description: Contains the id of the user that'll be banned.
        content:
          text/plain:
            example: "UniqueBarbie"
        required: true
      
      responses:
        '200':
          description: User banned successfully
          content:
            text/plain:
              example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    
    delete:
      tags: ["ban"]
      summary: Unbans a user.
      description: By removing the ban the unbanned user can see the posts,comments and likes of the user that unbanned him/her.
      operationId: unbanUser
      #parameters:
      #  - $ref: "#/components/parameters/bannedUserId"
      #  - $ref: '#/components/parameters/identifier'
      
      responses:
        '200':
          description: User unbanned successfully
          content:
            text/plain:
              example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/followers/{followerId}:
    parameters:
        - $ref: "#/components/parameters/followerId"
        - $ref: '#/components/parameters/identifier'
        
    put:
      tags: ["followers"]
      summary: Follows a certain user.
      description: |
        Allows a user (if he's logged in) to follow another user only if the latter didn't ban him. A user can't follow himself and can't follow a user he already follows. Once a user follows another one then his list of "Following" will be updated too.
      operationId: followUser
      #parameters:
      #  - $ref: "#/components/parameters/followerId"
      #  - $ref: '#/components/parameters/identifier'
      
      requestBody:
        description: Contains the follower id.
        content:
          text/plain:
            example: "Userigno"
        required: true
      
      responses:
        '200':
          description: User followed successfully
          content:
            text/plain:
              example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
    delete:
      tags: ["followers"]
      summary: Unfollows a certain user.
      description: |
        A user can decide to unfollow another one. He will be able to follow him again in the future.
      operationId: unfollowUser
      #parameters:
      #  - $ref: "#/components/parameters/followerId"
      #  - $ref: '#/components/parameters/identifier'
      
      responses:
        '200':
          description: User unfollowed successfully
          content:
            text/plain:
              example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"      
          
      security:
       - bearerAuth: [] 
#=====================================================================================
  /users/{id}/home/:
    get:
      tags: ["stream"]
      summary: Obtain the stream.
      description: Get all the photos (stream) from the following users.
      operationId: getMyStream
      
      parameters: 
        - $ref: '#/components/parameters/identifier'

      responses:
        '200':
          description: Contains a list of photos from following users in a reversed chronological order.
          content:
            application/json:
              schema:
                type: array
                description: An array of photos
                minItems: 1
                maxItems: 5
                items:
                  $ref: "#/components/schemas/Photo"
          
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos:
    post:
      tags: ["photo"]
      summary: Upload a photo.
      description: A user can upload one or multiple images on his/her profile.
      operationId: uploadPhoto
      
      requestBody:
        content:
          image/png:
            example: 010110010
        required: true
      
      parameters: 
        - $ref: '#/components/parameters/identifier'

      responses:
        '201':
          description: Photo successfully uploaded
          content:
            text/plain:
              example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photoId}:
    delete:
      tags: ["photo"]
      summary: Deletes a photo.
      description: Deletes a user's photo with relative comments and likes.
      operationId: deletePhoto
      
      parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photoId'

      responses:
        '200':
          description: Photo deleted successfully.
          content:
            text/plain:
              example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photoId}/comments:
    post:
      tags: ["comments"]
      summary: Add a comment to a photo.
      description: Adds a comment to a user's photo. Multiple comments can be made. Owners can comment their own photo.
      operationId: commentPhoto
      
      parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photoId'
      
      requestBody:
        description: Contains the id of who's commenting and the relative comment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      
      responses:
        '201':
          description: Comment added successfully.
          content:
            text/plain:
              example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photoId}/comments/{commentId}:
    delete:
      tags: ["comments"]
      summary: Remove a comment from a photo.
      description: Removes a comment from a user's photo. Only the owner of the photo can remove comments.
      operationId: uncommentPhoto
      
      parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photoId'
        - $ref: '#/components/parameters/commentId'
      
      responses:
        '200':
          description: Comment removed successfully.
          content:
            text/plain:
              example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photoId}/likes/{likeId}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photoId'
        - $ref: '#/components/parameters/likeId'
  
    put:
      tags: ["likes"]
      summary: Add a like to a photo.
      description: Adds a like to a user's photo. A user can only like a photo once (multiple likes count as one). Owners can't like their own photos.
      operationId: likePhoto
      
      #parameters: 
      #  - $ref: '#/components/parameters/identifier'
      #  - $ref: '#/components/parameters/photoId'
      #  - $ref: '#/components/parameters/likeId'
      
      requestBody:
        description: Contains the user's identifier that is liking the photo.
        content:
          text/plain:
            example: "IdenTic"
        required: true
      
      responses:
        '200':
          description: Comment added successfully.
          content:
            text/plain:
              example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
    
    delete:
      tags: ["likes"]
      summary: Remove a like from a photo.
      description: Removes a like from a user's photo.
      operationId: unlikePhoto
      
      #parameters: 
      #  - $ref: '#/components/parameters/identifier'
      #  - $ref: '#/components/parameters/photoId'
      #  - $ref: '#/components/parameters/likeId'
      
      responses:
        '200':
          description: Like removed successfully.
          content:
            text/plain:
              example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================

#_____________________________________________________________________________________________________
components:
  parameters:
  
    identifier:
      name: id
      in: path
      description: A user's unique id.
      required: true
      schema: 
        description: Id to search
        type: string
        pattern: 'Ë†.*?$'
        example: Marietto64
        minLength: 3
        maxLength: 16
        readOnly: true
        
    photoId:
      name: photoId
      in: path
      description: A photo unique identifier
      required: true
      schema: 
        description: Photo id
        type: string
        pattern: 'Ë†.*?$'
        example: S72h3k
        minLength: 3
        maxLength: 16
        readOnly: true
        
    commentId:
      name: commentId
      in: path
      description: A comment unique identifier
      required: true
      schema: 
        description: Comment unique id
        type: string
        pattern: 'Ë†.*?$'
        example: Z9z212l
        minLength: 3
        maxLength: 16
        readOnly: true
        
    followerId:
      name: followerId
      in: path
      description: A follower's unique identifier. It's exactly his *identifier*.
      required: true
      schema: 
        description: Follower unique id
        type: string
        pattern: 'Ë†.*?$'
        example: Z9z212l
        minLength: 3
        maxLength: 16
        readOnly: true
        
    likeId:
      name: likeId
      in: path
      description: A like unique identifier. It's exactly the *identifier* of the user that liked the photo.
      required: true
      schema: 
        description: Like unique id
        type: string
        pattern: 'Ë†.*?$'
        example: Nxjsn12
        minLength: 3
        maxLength: 16
        readOnly: true
        
    bannedUserId:
      name: bannedUserId
      in: path
      description: A banned user unique identifier. It's exactly the *identifier* of the user.
      required: true
      schema: 
        description: Banned user unique id
        type: string
        pattern: 'Ë†.*?$'
        example: Nxjsn12
        minLength: 3
        maxLength: 16
        readOnly: true
        
    queryId:
      in: query
      name: id
      description: id of the user that is being searched
      schema:
        type: string
        pattern: 'Ë†.*?$'
        minLength: 3
        maxLength: 16
        example: "Marietto64"
#_____________________________________________________________________________________________________
  schemas:
  
    Photo:
      description: A schema that represents a photo on WASAPhoto
      type: object
      properties:
        comments:
          description: Number of comments in a photo.
          type: integer
          example: 124
        likes:
          description: Number of comments in a photo.
          type: integer
          example: 1274
        date:
          description: Date and time of upload.
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          readOnly: true
        photoId:
          description: The photo unique identifier
          type: string
          minLength: 3
          maxLength: 20
          pattern: 'Ë†.*?$'
          readOnly: true
        owner:
          description: Unique identifier of the photo author.
          type: string
          minLength: 3
          maxLength: 16
          pattern: 'Ë†.*?$'
          example: "Mariucc"
      example: 
        comments: 0
        likes: 0
        date: 2017-07-21T17:32:28Z
        photoId: B9832ash
        owner: "Mariucc"
      
    Comment:
      description: A user's comment contains the text of the comment and the *identifier* of who commented.
      type: object
      properties:
        userId: 
          type: string
          minLength: 3
          maxLength: 16
          pattern: 'Ë†.*?$'
          example: "TopoGiggggggio"
        comment:
          type: string
          minLength: 1
          maxLength: 30
          description: String value of the comment
      example:
        user: PannaBoy22
        comment: "Wow che foto spectacularesss"
      
#_____________________________________________________________________________________________________  
  responses:
    UnauthorizedError:
      description: Access token is missing. User is not logged in.
      content:
        text/plain:
          example: User unauthorized
            
    NotFoundError:
      description: The requested resource doesn't exist.
      content:
        text/plain:
          example: Requested resource unavailable
            
    InternalServerError:
      description: Server has encountered an unknown error.
      content:
        text/plain:
          example: Unknown error 
#_____________________________________________________________________________________________________
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
#_____________________________________________________________________________________________________