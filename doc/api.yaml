openapi: 3.0.3
info:
  title: WASAPhoto API
  description: |
    This is the API for the WASAPhoto Homework 1 for the WaSa course by 1849661.
  version: 0.0.1

tags:
  - name: "login"
    description: Endpoint that manages the login
  - name: "search"
    description: Endpoint that manages search
  - name: "nickname"
    description: Endpoint that manages nickname change
  - name: "ban"
    description: Endpoint that manages banned users
  - name: "followers"
    description: Endpoint that manages followers
  - name: "stream"
    description: Endpoint that manages stream
  - name: "photo"
    description: Endpoint that manages photos
  - name: "comments"
    description: Endpoint that manages comments
  - name: "likes"
    description: Endpoint that manages likes
#=====================================================================================
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login2"
             
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/Login"
#=====================================================================================
  /users:
    get:
      tags: ["search"]
      summary: Gets the profile of the user with a certain id
      description: A user can find another user's profile only if he's not banned by the latter. Multiple users might match partially the nickname being searched
      operationId: getUserProfile

      parameters: 
        - $ref: "#/components/parameters/queryId"

      responses:
        '200':
          $ref: "#/components/responses/NicknameFound"
          #description: Nickname found successfully
          #content:
          #  text/plain:
          #    example: "NickNone"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}:
    parameters: 
        - $ref: "#/components/parameters/identifier"
        
    put:
      tags: ["nickname"]
      summary: Modifies the user's nickname
      description: Allows the user to modify his own nickname
      operationId: setMyUserName
        
      requestBody:
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/basic_string"
            example: "NickNone"
        required: true

      responses:
        '200':
          $ref: "#/components/responses/NicknameModified"
          #description: Nickname modified successfully
          #content:
          #  text/plain:
          #    example: OK
          
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/banned_users/{banned_user_id}:
    parameters:
        - $ref: "#/components/parameters/banned_user_id"
        - $ref: '#/components/parameters/identifier'
  
    put:
      tags: ["ban"]
      summary: Bans a user
      description: Once a user is blocked he/she won't be able to see anything from whoever banned him/her. That includes comments,likes, photos and the profile of the banning user. Banning multiple times is equivalent to banning a user once
      operationId: banUser
      
      requestBody:
        description: Contains the id of the user that'll be banned
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/basic_string"
            example: "UniqueBarbie"
        required: true
      
      responses:
        '200':
          $ref: "#/components/responses/UserBanned"
          #description: User banned successfully
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
    
    delete:
      tags: ["ban"]
      summary: Unbans a user
      description: By removing the ban the unbanned user can see the posts,comments and likes of the user that unbanned him/her
      operationId: unbanUser
      
      responses:
        '200':
          $ref: "#/components/responses/UserUnbanned"
          #description: User unbanned successfully
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/followers/{follower_id}:
    parameters:
        - $ref: "#/components/parameters/follower_id"
        - $ref: '#/components/parameters/identifier'
        
    put:
      tags: ["followers"]
      summary: Follows a certain user
      description: |
        Allows a user (if he's logged in) to follow another user only if the latter didn't ban him. A user can't follow himself and can't follow a user he already follows. Once a user follows another one then his list of "Following" will be updated too
      operationId: followUser
      
      requestBody:
        description: Contains the follower id
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/basic_string"
            example: "Userigno"
        required: true
      
      responses:
        '200':
          $ref: "#/components/responses/UserFollowed"
          #description: User followed successfully
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: [] 
          
    delete:
      tags: ["followers"]
      summary: Unfollows a certain user
      description: |
        A user can decide to unfollow another one. He will be able to follow him again in the future
      operationId: unfollowUser
      
      responses:
        '200':
          $ref: "#/components/responses/UserUnfollowed"
          #description: User unfollowed successfully
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"      
          
      security:
       - bearerAuth: [] 
#=====================================================================================
  /users/{id}/home:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        
    get:
      tags: ["stream"]
      summary: Obtain the stream
      description: Get all the photos (stream) from the following users
      operationId: getMyStream

      responses:
        '200':
          $ref: "#/components/responses/Stream"
          #description: Contains a list of photos from following users in a reversed chronological order.
          #content:
          #  application/json:
          #    schema:
          #      $ref: "#/components/schemas/Photos"
          
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: A user can upload one or multiple images on his/her profile
      operationId: uploadPhoto
      
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
            example: 010110010
        required: true

      responses:
        '201':
          $ref: "#/components/responses/PhotoUploaded"
          #description: Photo successfully uploaded
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        
    delete:
      tags: ["photo"]
      summary: Deletes a photo
      description: Deletes a user's photo with relative comments and likes
      operationId: deletePhoto
      
      responses:
        '200':
          $ref: "#/components/responses/PhotoDeleted"
          #description: Photo deleted successfully.
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}/comments:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        
    post:
      tags: ["comments"]
      summary: Add a comment to a photo
      description: Adds a comment to a user's photo. Multiple comments can be made. Owners can comment their own photo
      operationId: commentPhoto
      
      requestBody:
        description: Contains the id of who's commenting and the relative comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      
      responses:
        '201':
          $ref: '#/components/responses/CommentAdded'
          #description: Comment added successfully.
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}/comments/{comment_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        - $ref: '#/components/parameters/comment_id'
        
    delete:
      tags: ["comments"]
      summary: Remove a comment from a photo
      description: Removes a comment from a user's photo. Only the owner of the photo can remove comments
      operationId: uncommentPhoto
      
      responses:
        '200':
          $ref: '#/components/responses/CommentRemoved'
          #description: Comment removed successfully.
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}/likes/{like_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        - $ref: '#/components/parameters/like_id'
  
    put:
      tags: ["likes"]
      summary: Add a like to a photo
      description: Adds a like to a user's photo. A user can only like a photo once (multiple likes count as one). Owners can't like their own photos
      operationId: likePhoto
      
      requestBody:
        description: Contains the user's identifier that is liking the photo
        content:
          text/plain:
            schema:
              $ref: "#/components/schemas/basic_string"
            example: "IdenTic"
        required: true
      
      responses:
        '200':
          $ref: '#/components/responses/LikeAdded'
          #description: Comment added successfully.
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
      
      security:
        - bearerAuth: [] 
    
    delete:
      tags: ["likes"]
      summary: Remove a like from a photo
      description: Removes a like from a user's photo
      operationId: unlikePhoto
      
      responses:
        '200':
          $ref: '#/components/responses/LikeRemoved'
          #description: Like removed successfully.
          #content:
          #  text/plain:
          #    example: OK
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: "#/components/responses/NotFoundError"
        '500':
          $ref: "#/components/responses/InternalServerError"
          
      security:
        - bearerAuth: [] 
#=====================================================================================

#_____________________________________________________________________________________________________
components:
  parameters:
  
    identifier:
      name: id
      in: path
      description: A user's unique id
      required: true
      schema: 
        description: Id to search
        type: string
        pattern: '.*'
        example: Marietto64
        minLength: 3
        maxLength: 16
        readOnly: true
        
    photo_id:
      name: photo_id
      in: path
      description: A photo unique identifier
      required: true
      schema: 
        description: Photo id
        type: string
        pattern: '.*'
        example: S72h3k
        minLength: 3
        maxLength: 16
        readOnly: true
        
    comment_id:
      name: comment_id
      in: path
      description: A comment unique identifier
      required: true
      schema: 
        description: Comment unique id
        type: string
        pattern: '.*'
        example: Z9z212l
        minLength: 3
        maxLength: 16
        readOnly: true
        
    follower_id:
      name: follower_id
      in: path
      description: A follower's unique identifier. It's exactly his *identifier*
      required: true
      schema: 
        description: Follower unique id
        type: string
        pattern: '.*'
        example: Z9z212l
        minLength: 3
        maxLength: 16
        readOnly: true
        
    like_id:
      name: like_id
      in: path
      description: A like unique identifier. It's exactly the *identifier* of the user that liked the photo
      required: true
      schema: 
        description: Like unique id
        type: string
        pattern: '.*'
        example: Nxjsn12
        minLength: 3
        maxLength: 16
        readOnly: true
        
    banned_user_id:
      name: banned_user_id
      in: path
      description: A banned user unique identifier. It's exactly the *identifier* of the user
      required: true
      schema: 
        description: Banned user unique id
        type: string
        pattern: '.*'
        example: Nxjsn12
        minLength: 3
        maxLength: 16
        readOnly: true
        
    queryId:
      in: query
      name: id
      description: id of the user that is being searched
      schema:
        description: usual *identifier*
        type: string
        pattern: '.*'
        minLength: 3
        maxLength: 16
        example: "Marietto64"
#_____________________________________________________________________________________________________
  schemas:
  
    Photo:
      description: A schema that represents a photo on WASAPhoto
      type: object
      properties:
        comments:
          description: Number of comments in a photo
          type: integer
          example: 124
        likes:
          description: Number of comments in a photo
          type: integer
          example: 1274
        date:
          description: Date and time of upload.
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          readOnly: true
        photo_id:
          description: The photo unique identifier
          type: string
          minLength: 3
          maxLength: 20
          pattern: '.*'
          readOnly: true
        owner:
          description: Unique identifier of the photo author
          type: string
          minLength: 3
          maxLength: 16
          pattern: '.*'
          example: "Mariucc"
      example: 
        comments: 0
        likes: 0
        date: 2017-07-21T17:32:28Z
        photo_id: B9832ash
        owner: "Mariucc"
      
    Comment:
      description: A user's comment contains the text of the comment and the *identifier* of who commented
      type: object
      properties:
        user_id: 
          type: string
          minLength: 3
          maxLength: 16
          pattern: '.*'
          example: "TopoGiggggggio"
          description: Usual user *identifier*
        comment:
          type: string
          minLength: 1
          maxLength: 30
          pattern: '.*'
          example: OK my bruh
          description: String value of the comment
      example:
        user: PannaBoy22
        comment: "Wow che foto spectacularesss"
        
    Photos:
      type: array
      description: An array of photos
      minItems: 0
      maxItems: 5
      items:
        $ref: "#/components/schemas/Photo"
      example:
        - B9832ash: 
          comments: 1273
          likes: 15983
          date: 2017-07-21T17:32:28Z
          photo_id: B9832ash
          owner: "Sapienza"
          
        - saUDH2:
          comments: 13
          likes: 60
          date: 2022-11-22T13:10:14Z
          photo_id: saUDH2
          owner: "Nerd99"
        
    Login:
      description: login stuff
      type: object
      properties:
        identifier:
          description: login stuff
          # change here if you decide to use an integer
          # or any other type of identifier
          type: string
          minLength: 3
          maxLength: 16
          pattern: '.*'
          example: "abcdef012345"
          
    Login2:
      description: login stuff
      type: object
      properties:
        name:
          description: login stuff
          type: string
          example: Maria
          pattern: '.*'
          minLength: 3
          maxLength: 16
    
    basic_string:
      description: Schema for a simple string 
      type: string
      minLength: 3
      maxLength: 16
      pattern: '.*'
      example: I'm a string!
    
    #basic_response:
    #  description: Schema for standard-error responses
    #  type: object
    #  properties:
    #    errorMessage:
    #      description: Error message
    #      type: string
    #      minLength: 3
    #      maxLength: 30
    #      pattern: '.*'
    #      example: I'm a standar-error content!
    #  example:
    #    message: I'm an error message
        
    basic_response:
      description: Schema for standard-error responses
      type: string
      minLength: 3
      maxLength: 30
      pattern: '.*'
      example: I'm a standard-error content!
      
    nickname_list:
      description: List of users found
      type: array
      minItems: 0
      maxItems: 10
      items:
        type: string
        minLength: 3
        maxLength: 16
        pattern: '.*'
        example: NurseNight
      example:
        - Wario21
        - Watermelon
        - WaveBruh
        - WantedMan66
      
#_____________________________________________________________________________________________________  
  responses:
    UnauthorizedError:
      description: Access token is missing. User is not logged in
      content:
        #application/json:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_response"
          example: User unauthorized
            #message: User unauthorized
            
    NotFoundError:
      description: The requested resource doesn't exist
      content:
        #application/json:
        text/plain:
          schema:
              $ref: "#/components/schemas/basic_response"
          example: Requested resource unavailable
            #message: Requested resource unavailable
            
    InternalServerError:
      description: Server has encountered an unknown error
      content:
        #application/json:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_response"
          example: Unknown error 
            #message: Unknown error 
          
    UserBanned:
      description: User banned successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    UserUnbanned:
      description: User unbanned successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    NicknameFound:
      description: Nickname found successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/nickname_list"
          #example: Wussup68
          
    NicknameModified:
      description: Nickname modified successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
    
    LikeAdded:
      description: Like added successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    LikeRemoved:
      description: Like removed successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    CommentAdded:
      description: Comment added successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    CommentRemoved:
      description: Comment removed successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
    
    UserFollowed:
      description: User followed successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    UserUnfollowed:
      description: User unfollowed successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    PhotoUploaded:
      description: Photo uploaded successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    PhotoDeleted:
      description: Photo deleted successfully
      content:
        text/plain:
          schema:
            $ref: "#/components/schemas/basic_string"
          example: Success
          
    Stream:
      description: Contains a list of photos from following users in a reversed chronological order.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Photos"

#_____________________________________________________________________________________________________
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
#_____________________________________________________________________________________________________