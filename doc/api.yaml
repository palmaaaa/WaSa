openapi: 3.0.3
info:
  title: WASAphoto API
  description: |
    This is the API for the WASAphoto Homework 1 for the WaSa course by 1849661.
  version: 0.0.1

tags:
  - name: "login"
    description: Endpoint that manages the login
  - name: "search"
    description: Endpoint that manages search
  - name: "user"
    description: Endpoint that manages users
  - name: "ban"
    description: Endpoint that manages banned users
  - name: "followers"
    description: Endpoint that manages followers
  - name: "stream"
    description: Endpoint that manages stream
  - name: "photo"
    description: Endpoint that manages photos
  - name: "comments"
    description: Endpoint that manages comments
  - name: "likes"
    description: Endpoint that manages likes
#=====================================================================================
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_login"

        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/login_return"
#=====================================================================================
  /users:
    get:
      tags: ["search"]
      summary: Gets the profile of the user with a certain id
      description: A user can find another user's profile only if he's not banned by the latter. Multiple users might match partially the nickname being searched
      operationId: getUserProfile

      parameters: 
        - $ref: "#/components/parameters/query_id"

      responses:
        '200':
          $ref: "#/components/responses/user_found"
        '401':
          $ref: "#/components/responses/unauthorized"
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}:
    parameters: 
        - $ref: "#/components/parameters/identifier"
        
    get:
      tags: ["user"]
      summary: Retrieves all the info of a profile
      description: Allows the user to obtain a profile complete info (can't be banned by the profile owner)
      operationId: getProfile
      
      responses:
        '200':
          $ref: "#/components/responses/profile"
        '206':
          $ref: "#/components/responses/partial_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: []         

    put:
      tags: ["user"]
      summary: Modifies the user's nickname
      description: Allows the user to modify his own nickname
      operationId: setMyUserName
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user_nickname"
            example: 
              nickname: "NickBruhhh"
        required: true

      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/banned_users/{banned_user_id}:
    parameters:
        - $ref: "#/components/parameters/banned_user_id"
        - $ref: '#/components/parameters/identifier'
  
    put:
      tags: ["ban"]
      summary: Bans a user
      description: Once a user is blocked he/she won't be able to see anything from whoever banned him/her. That includes comments,likes, photos and the profile of the banning user. Banning multiple times is equivalent to banning a user once
      operationId: banUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
    
    delete:
      tags: ["ban"]
      summary: Unbans a user
      description: By removing the ban the unbanned user can see the posts,comments and likes of the user that unbanned him/her
      operationId: unbanUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/followers/{follower_id}:
    parameters:
        - $ref: "#/components/parameters/follower_id"
        - $ref: '#/components/parameters/identifier'
        
    put:
      tags: ["followers"]
      summary: Follows a certain user
      description: |
        Allows a user (if he's logged in) to follow another user only if the latter didn't ban him. A user can't follow himself and can't follow a user he already follows. Once a user follows another one then his list of "Following" will be updated too
      operationId: followUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      
      security:
        - bearerAuth: [] 
          
    delete:
      tags: ["followers"]
      summary: Unfollows a certain user
      description: |
        A user can decide to unfollow another one. He will be able to follow him again in the future
      operationId: unfollowUser
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"      
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/home:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        
    get:
      tags: ["stream"]
      summary: Obtain the stream
      description: Get all the photos (stream) from the following users
      operationId: getMyStream

      responses:
        '200':
          $ref: "#/components/responses/stream"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        
    post:
      tags: ["photo"]
      summary: Upload a photo
      description: A user can upload one or multiple images on his/her profile
      operationId: uploadPhoto
      
      requestBody:
        content:
          image/*:
            schema:
              $ref: "#/components/schemas/raw_photo"
            example:
              photo_data: "010110010"
        required: true

      responses:
        '201':
          $ref: "#/components/responses/photo_uploaded"
        '401':
          $ref: "#/components/responses/unauthorized"
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        
        
    get:
      tags: ["photo"]
      summary: Downloads a photo
      description: A user can access a photo if he/she's the owner or if he/she wasn't banned by the owner
      operationId: getPhoto
      
      responses:
        '200':
          $ref: "#/components/responses/photo"
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
        
    delete:
      tags: ["photo"]
      summary: Deletes a photo
      description: Deletes a user's photo with relative comments and likes
      operationId: deletePhoto
      
      responses:
        '204':
          $ref: "#/components/responses/no_content"
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}/comments:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        
    post:
      tags: ["comments"]
      summary: Add a comment to a photo
      description: Adds a comment to a user's photo. Multiple comments can be made. Owners can comment their own photo
      operationId: commentPhoto
      
      requestBody:
        description: Contains the id of who's commenting and the relative comment
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/comment'
        required: true
      
      responses:
        '201':
          $ref: '#/components/responses/comment_added'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}/comments/{comment_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        - $ref: '#/components/parameters/comment_id'
        
    delete:
      tags: ["comments"]
      summary: Remove a comment from a photo
      description: Removes a comment from a user's photo. Only the owner of the photo can remove comments
      operationId: uncommentPhoto
      
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
  /users/{id}/photos/{photo_id}/likes/{like_id}:
    parameters: 
        - $ref: '#/components/parameters/identifier'
        - $ref: '#/components/parameters/photo_id'
        - $ref: '#/components/parameters/like_id'
  
    put:
      tags: ["likes"]
      summary: Add a like to a photo
      description: Adds a like to a user's photo. A user can only like a photo once (multiple likes count as one). Owners can't like their own photos
      operationId: likePhoto
      
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
      
      security:
        - bearerAuth: [] 
    
    delete:
      tags: ["likes"]
      summary: Remove a like from a photo
      description: Removes a like from a user's photo
      operationId: unlikePhoto
      
      responses:
        '204':
          $ref: '#/components/responses/no_content'
        '401':
          $ref: '#/components/responses/unauthorized'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: "#/components/responses/not_found"
        '500':
          $ref: "#/components/responses/internal_server_error"
          
      security:
        - bearerAuth: [] 
#=====================================================================================
#_____________________________________________________________________________________________________
components:

  parameters:

    identifier:
      name: id
      in: path
      description: A user's unique id
      required: true
      schema:
        description: String between 3-16 characters
        type: string
        pattern: '^.*?$'
        example: Marietto64
        minLength: 3
        maxLength: 16
        readOnly: true
#........................................................        
    photo_id:
      name: photo_id
      in: path
      description: A photo unique identifier
      required: true
      schema: 
        description: Int64 between 0-9999
        type: integer
        format: int64
        minimum: 0
        maximum: 9999
        example : 999
        readOnly: true
#........................................................      
    comment_id:
      name: comment_id
      in: path
      description: A comment unique identifier
      required: true
      schema:
        $ref: "#/components/schemas/comment_identifier/properties/comment_id"
      example: 118
#........................................................        
    follower_id:
      name: follower_id
      in: path
      description: A follower's unique identifier. It's exactly his *identifier*
      required: true
      schema: 
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "Piccioni"
#........................................................       
    like_id:
      name: like_id
      in: path
      description: A like unique identifier. It's exactly the *identifier* of the user that liked the photo
      required: true
      schema: 
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "LauraZ"
#........................................................       
    banned_user_id:
      name: banned_user_id
      in: path
      description: A banned user unique identifier. It's exactly the *identifier* of the user
      required: true
      schema:
        $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: "Akille"
#........................................................      
    query_id:
      name: id
      in: query
      description: id of the user that is being searched
      schema:
        description: usual *identifier*
        type: string
        pattern: '^.*?$'
        minLength: 3
        maxLength: 16
        example: "Luis64"
      example: "luigi64"
#........................................................  
#_____________________________________________________________________________________________________
  schemas:

    user_nickname:
      description: It's a user's nickname
      type: object
      properties:
        nickname:
          description: Any string between 3-16 characters
          type: string
          minLength: 3
          maxLength: 16
          pattern: '^.*?$'
          example: "PulpFiction"
      example:
        nickname: "PolpoFizione"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||   
    complete_user:
      description: Contains both *unique identifier and nickname of a user
      type: object
      properties:
        user_id:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
        nickname:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
      example:
        user_id: "Bro9999"
        nickname: "YourBro"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||   
    comment_identifier:
      description: It's a comment *unique* id
      type: object
      properties:
        comment_id:
          description: Any number between 0-9999
          type: integer
          format: int64
          minimum: 0
          maximum: 9999
          readOnly: true
          example: 965
      example:
        comment_id: 965
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||        
    comment:
      description: A user's comment contains the text of the comment and the *identifier* of who commented
      type: object
      properties:
        user_id: 
          $ref: "#/components/schemas/user_nickname/properties/nickname"
        nickname: 
          $ref: "#/components/schemas/user_nickname/properties/nickname"
        comment:
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^.*?$'
          example: OK my bruh
          description: String value of the comment
        comment_id:
          $ref: "#/components/schemas/comment_identifier/properties/comment_id"
      example:
        user_id: "PannaBoy22"
        nickname: "22creammm"
        photo_id: 873
        comment: "Wow che foto spectacularesss"    
        comment_id: 16
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    raw_photo:
      description: Image content
      type: object
      properties:
        photo_data:
          description: "Raw data of the photo"
          type: string
          minLength: 0
          maxLength: 100
          format: binary
          example: "010110010"
      example: 
        photo_data: "010110010"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    photo:
      description: Contains the essential info of a photo
      type: object
      properties:
        comments:
          description: Array of comments of a photo
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/comment"
          example:
            - comments:
              - user_id: "miky"
                nickname: "ErMike"
                photo_id: 3821
                comment: "bella foto!"
                comment_id: 23
        likes:
          description:  Array of users that liked a photo
          type: array
          minItems: 0
          maxItems: 9999
          items:
            $ref: "#/components/schemas/complete_user"
          example: 
            -  user_id: "Bro9999"
               nickname: "YourBro"
            -  user_id: "brrrrr"
               nickname: "rkomi"
        date:
          description: Date and time of upload.
          type: string
          format: date-time
          example: 2017-07-21T17:32:28Z
          readOnly: true
        photo_id:
          $ref: "#/components/schemas/comment_identifier/properties/comment_id"
        owner:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
      example: 
        comments:
          - user_id: "miky"
            nickname: "ErMike"
            photo_id: 3821
            comment: "bella foto!"
            comment_id: 99
        likes:
          - user_id: "miky"
            nickname: "ErMike"
        date: 2017-07-21T17:32:28Z
        photo_id: 3821
        owner: "Mariucc"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||      
    photos:
      description: Represents a list of photos
      type: object
      properties:
        photos_list:
          description: List of photos
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/photo"
          example:
            - comments:
                - user_id: "donatello"
                  nickname: "donatello99"
                  photo_id: 8321
                  comment: "wow, nice"
                  comment_id: 7
                - user_id: "raffaello"
                  nickname: "raffaello99"
                  photo_id: 8321
                  comment: "impossible!"
                  comment_id: 76
            - likes:
              - user_id: "donatello"
                nickname: "donatello99"
              - user_id: "raffaello"
                nickname: "raffaello99"
              date: 2017-07-21T17:32:28Z
              photo_id: 8321
              owner: "Sapienzagram"
              
            - comments:
                - user_id: "sfera"
                  nickname: "noNo"
                  photo_id: 7836
                  comment: "bella li"
                  comment_id: 44
                - user_id: "tiziano"
                  nickname: "ferroZ68"
                  photo_id: 7836
                  comment: "spaccaaa"
                  comment_id: 912
            - likes:
              - user_id: "sfera"
                nickname: "ebbasta"
              - user_id: "tiziano"
                nickname: "ferro"
              - user_id: "raffaello"
                nickname: "raffaello99"
              date: 2022-11-22T13:10:14Z
              photo_id: 7836
              owner: "Nerd99"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||      
    users_list:
      description: List of users found
      type: object
      properties:
        users:
          description: Array of users with a partial match on the searched nickname
          type: array
          minItems: 0
          maxItems: 10
          items:
            $ref: "#/components/schemas/complete_user"
          example:
            - user_id: Wario21
              nickname: marietto21
            - user_id: Watermelon
              nickname: cocomeros
            - user_id: WaveBruh
              nickname: ondaBro
            - user_id: WantedMan66
              nickname: uomoRicercato
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||  
    complete_profile:
          description: Object containing all the profile info
          type: object
          properties:
          
            user_id:
              $ref: "#/components/schemas/user_nickname/properties/nickname"
              
            nickname:
              $ref: "#/components/schemas/user_nickname/properties/nickname"
              
            followers:
              description: Array of followers
              type: array
              minItems: 0
              maxItems: 99
              items:
                $ref: "#/components/schemas/complete_user"
              example:
                - user_id: "Wario21"
                  nickname: "warietto21"
                - user_id: "giulio"
                  nickname: "Milioo"

            following:
              description: Array of followed users
              type: array
              minItems: 0
              maxItems: 99
              items:
                $ref: "#/components/schemas/complete_user"
              example:
                - user_id: "giulio"
                  nickname: "Milioo"
                
            photos:
              description: Array of photos
              type: array
              minItems: 0
              maxItems: 10
              items:
                $ref: "#/components/schemas/photo"
              example:
                - comments:
                  - user_id: "sfera"
                    nickname: "noNo"
                    comment: "bella li"
                    comment_id: 104
                  - user_id: "tiziano"
                    nickname: "ferroZ68"
                    comment: "spaccaaa"
                    comment_id: 99
                - likes:
                  - user_id: "sfera"
                    nickname: "noNo"
                  - user_id: "tiziano"
                    nickname: "ferroZ68"
                  - user_id: "raffaello"
                    nickname: "raffaello99"
                    
                  date: 2022-11-22T13:10:14Z
                  photo_id: 7836
                  owner: "PulpFiction"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||            
    user_login:
      description: Identifier sent by user during the login
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||          
    login_return:
      description: Identifier returned after the login
      type: object
      properties:
        identifier:
          $ref: "#/components/schemas/user_nickname/properties/nickname"
#||||||||||||||||||||||||||||||||||||||||||||||||||||||||
#_____________________________________________________________________________________________________  
  responses:
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    no_content:
      description: Response associated to the 204 http status (No content to send for this reques)
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''     
    partial_content:
      description: Response associated to the 206 http status (The requested resource has partial info)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/complete_profile" 
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''      
    unauthorized:
      description:  Response associated to the 401 http status (Access token is missing. User is not logged in)
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''          
    forbidden:
      description: Response associated to the 403 http status (Access denied )
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''     
    not_found:
      description: Response associated to the 404 http status (The requested resource doesn't exist)
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''            
    internal_server_error:
      description: Response associated to the 500 http status (Server has encountered an unknown error)
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    user_found:
      description: There's a match for the given identifier/nickname. User/users found successfully
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/users_list"
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''          
    stream:
      description: Contains a list of photos from following users in a reversed chronological order
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photos"
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''            
    comment_added:
      description: Comment has been added successfully. Returns the comment *unique* identifier
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/comment_identifier"
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''            
    photo_uploaded:
      description: photo has been uploaded successfully. Returns the *unique* id of the posted photo
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/photo"
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    profile:
      description: All the info of a profile
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/complete_profile"
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    photo:
      description: The binary data of a photo
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/raw_photo"
#''''''''''''''''''''''''''''''''''''''''''''''''''''''''
#_____________________________________________________________________________________________________
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
#_____________________________________________________________________________________________________